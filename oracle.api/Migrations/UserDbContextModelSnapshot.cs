// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using oracle.api.Infrastructure.Contexts;

namespace oracle.api.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "08cba36d-764a-42ac-9424-60d3265f8f23",
                            ConcurrencyStamp = "043d4314-df87-480c-9ecb-71dfc6fa7e38",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "83fdc6f0-45df-499b-96e7-9d3b5255b471",
                            RoleId = "08cba36d-764a-42ac-9424-60d3265f8f23"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("oracle.api.Entities.Auther.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100);

                    b.Property<string>("AuthorNameEn")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateOn");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorName = "علاء عباس الطير",
                            AuthorNameEn = "Alaa Abbas Altair",
                            CreatedOn = new DateTime(2019, 7, 31, 20, 40, 58, 732, DateTimeKind.Local).AddTicks(6848),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("oracle.api.Entities.Course.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("CourseCategory")
                        .HasMaxLength(50);

                    b.Property<string>("CourseCategoryEn")
                        .HasMaxLength(50);

                    b.Property<string>("CourseName")
                        .HasMaxLength(50);

                    b.Property<string>("CourseNameEn")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateOn");

                    b.HasKey("CourseId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            AuthorId = 1,
                            CourseCategory = "شامل",
                            CourseCategoryEn = "FullStack",
                            CourseName = "دوره (.Net Core With React) ",
                            CourseNameEn = ".Net Core With React",
                            CreatedOn = new DateTime(2019, 7, 31, 20, 40, 58, 734, DateTimeKind.Local).AddTicks(6843),
                            IsDelete = false
                        },
                        new
                        {
                            CourseId = 2,
                            AuthorId = 1,
                            CourseCategory = "تصمم وجهات",
                            CourseCategoryEn = "FrontEnd",
                            CourseName = "دوره (React With Redux)",
                            CourseNameEn = "React With Redux",
                            CreatedOn = new DateTime(2019, 7, 31, 20, 40, 58, 734, DateTimeKind.Local).AddTicks(8929),
                            IsDelete = false
                        },
                        new
                        {
                            CourseId = 3,
                            AuthorId = 1,
                            CourseCategory = "برمجه",
                            CourseCategoryEn = "BackEnd",
                            CourseName = "دوره (.Net Core WebApi)",
                            CourseNameEn = ".Net Core WebApi",
                            CreatedOn = new DateTime(2019, 7, 31, 20, 40, 58, 734, DateTimeKind.Local).AddTicks(8984),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("oracle.api.Entities.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstNameEn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastName");

                    b.Property<string>("LastNameEn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImg");

                    b.Property<string>("SecondName");

                    b.Property<string>("SecondNameEn");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Street");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime?>("UpdateOn");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "83fdc6f0-45df-499b-96e7-9d3b5255b471",
                            AccessFailedCount = 0,
                            Address = "Amman",
                            BirthDate = new DateTime(1993, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Amman",
                            ConcurrencyStamp = "0c36d87b-8d62-40ed-8512-a7ea1faf7435",
                            CreatedOn = new DateTime(2019, 7, 31, 20, 40, 58, 706, DateTimeKind.Local).AddTicks(6409),
                            Email = "aaltair.developer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "علاء",
                            FirstNameEn = "Alaa",
                            IsDelete = false,
                            LastName = "الطير",
                            LastNameEn = "Altair",
                            LockoutEnabled = false,
                            NormalizedEmail = "AALTAIR.DEVELOPER@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTAQ9qqjkAkMnoS/hhFwzEq2ADjU0MF9Wht+QGtE0OjBXgNWgu5wYJDFDmyh4Y03w==",
                            PhoneNumber = "+962788260020",
                            PhoneNumberConfirmed = true,
                            SecondName = "عباس",
                            SecondNameEn = "Abbas",
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("oracle.api.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("oracle.api.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("oracle.api.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("oracle.api.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("oracle.api.Entities.Course.Course", b =>
                {
                    b.HasOne("oracle.api.Entities.Auther.Author", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
